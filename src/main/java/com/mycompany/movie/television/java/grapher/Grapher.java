/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.movie.television.java.grapher;
import com.omertron.themoviedbapi.MovieDbException;
import com.omertron.themoviedbapi.TheMovieDbApi;
import com.omertron.themoviedbapi;
import com.omertron.themoviedbapi.enumeration.MediaType;
import com.omertron.themoviedbapi.enumeration.SearchType;
import com.omertron.themoviedbapi.model.credits.CreditMovieBasic;
import com.omertron.themoviedbapi.model.credits.MediaCreditCast;
import com.omertron.themoviedbapi.model.discover.Discover;
import com.omertron.themoviedbapi.model.media.MediaBasic;
import com.omertron.themoviedbapi.model.media.MediaCreditList;
import com.omertron.themoviedbapi.model.movie.MovieBasic;
import com.omertron.themoviedbapi.model.person.PersonCreditList;
import com.omertron.themoviedbapi.model.person.PersonInfo;
import com.omertron.themoviedbapi.results.ResultList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author STAHLZD1
 */
public class Grapher extends javax.swing.JFrame {
    public static final String APIKey = "4478254429838ff2f8bef88ec1097909";
    private TheMovieDbApi TMDb = null;
    private static final Logger LOG = LoggerFactory.getLogger(Grapher.class);
    private String queryString = "The Pink Panther";
    
    private Map<String, List<String>> actorMovieDictionary = new HashMap<>();
    /**
     * Creates new form Grapher
     */
    public Grapher() {
        initComponents();
        
        //init connection to TheMovieDbApi
        try {
            TMDb = new TheMovieDbApi(APIKey);
        } catch (MovieDbException ex) {
            LOG.warn("Failed to initialise TheMovieDB API: {}", ex.getMessage());
            return;
        }
        
        // Query Search Term
        ResultList<MediaBasic> resultsList = TMDb.searchMulti(queryString, 1, "English", false);
        // Get a list of media results
        List<MediaBasic> mediaList = resultsList.getResults();
        // Check to make sure there are results media result;
        if (mediaList.isEmpty()) {
            return;
        }
        
        // Create a MediaBasic to hold result
        MediaBasic mediaResult = new MediaBasic(); 
        
        //find first movie in list
        Iterator<MediaBasic> mediaIterator = mediaList.iterator();
        boolean firstResultNotFound = true;
	while (mediaIterator.hasNext() && firstResultNotFound) {
            mediaResult = mediaIterator.next();
            if (mediaResult.getMediaType() == MediaType.MOVIE) {
                firstResultNotFound = false;
            }
	}
        
        if (firstResultNotFound) { //No Movies Returned
            return;
        }
        
        //Attempt to get movie credita
        int mediaId = mediaResult.getId();
        MediaCreditList movieCredits = new MediaCreditList();
        try {
            movieCredits = TMDb.getMovieCredits(mediaId);
        } catch (MovieDbException ex) {
            LOG.warn("Failed to get Movie credits: {}", ex.getMessage());
        }            
        
        List<MediaCreditCast> movieCast = movieCredits.getCast();
        Iterator<MediaCreditCast> i = movieCast.iterator();
        while(i.hasNext()) {
            MediaCreditCast castMember = i.next();
            String castMemberName = castMember.getName();
            int castMemberId = castMember.getCastId();
            PersonCreditList<CreditMovieBasic> castMemberMovieCredits = TMDb.getPersonMovieCredits(castMemberId, "English");
            List<CreditMovieBasic> castMemberMovieList = castMemberMovieCredits.getCast();
            //castMemberMovieList.get(0).getTitle;
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Grapher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Grapher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Grapher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Grapher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Grapher().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
